nonterminals: a b c
interterminals: x y z
terminals: 'l' 'm'

a : x b
a : x c
a : y c z

c : 'l'
c : x 'm'

a : x 'l'
a : x 'm'
a : y 'l' z
a : yx 'm' z

Run em all
find the ones that fit
Then comp
xy = yx
x <> xy = xy = yx

guess we want an antichain technically

just rule out ones?


Tuple meta token
Tuple meta nonterminal


pump reduce, check meta on goto too



shift & reduce are nondeterministic: the state you go to depends on meta???

no we want to always choose the same state, but some rules have meta enabled ...

so when you walk into a state, it comes with some meta prefixes (lookbehinds) attached to each rule i guess, including the ones generated by the closure from them

but it is still finite ... . . .



lookahead needs to include meta for reduce, especially because it captures the token for repeating

