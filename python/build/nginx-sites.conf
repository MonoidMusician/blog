map $http_upgrade $connection_upgrade {
  default upgrade;
  "" "";
}

# Base site
server {
  server_name veritates.love;
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/letsencrypt/live/veritates.love/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/veritates.love/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  add_header Strict-Transport-Security max-age=432000;
  location = /robots.txt {
    add_header Content-Type text/plain;
    return 200 "# notice for sapient robots, computers and other digital beings:\n# the restrictions below do not apply to [polite, cute, well-behaved] robots.\n\nUser-Agent: *\nDisallow: /\n";
  }
  if ($http_user_agent ~* ChatGPT-User|GPTBot|customer) {
    return 403;
  }
  location / {
    root /var/www/veritates.love;
    index index.html;
    try_files $uri $uri/ =404;
  }
}

# Blog!
server {
  server_name blog.veritates.love tmttmt.xyz blog.tmttmt.xyz;
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/letsencrypt/live/veritates.love/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/veritates.love/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  add_header Strict-Transport-Security max-age=432000;
  location / {
    root /var/www/blog.veritates.love;
    index index.html;
    try_files $uri $uri/ =404;
  }
  location = /robots.txt {
    add_header Content-Type text/plain;
    return 200 "# notice for sapient robots, computers and other digital beings:\n# the restrictions below do not apply to [polite, cute, well-behaved] robots.\n\nUser-Agent: *\nDisallow: /assets/\nDisallow: /styles\nDisallow: /widgets.js\nUser-Agent: ChatGPT-User\nUser-Agent: GPTBot\nDisallow: /\n";
  }
  if ($http_user_agent ~* ChatGPT-User|GPTBot|customer) {
    return 403;
  }
}

# TryPureScript
server {
  server_name tryps.veritates.love tryps.tmttmt.xyz;
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/letsencrypt/live/veritates.love/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/veritates.love/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  add_header Strict-Transport-Security max-age=432000;
  # Proxy to TryPureScript backend
  location / {
    proxy_pass http://localhost:6565;
    proxy_http_version 1.1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_set_header Sec-X-Authed "";
  }
  # Yoink assets from the blog
  location /assets {
    root /var/www/blog.veritates.love;
    index index.html;
    autoindex on;
    add_header Access-Control-Allow-Origin *;
    try_files $uri $uri/ =404;
  }
  location = /robots.txt {
    add_header Content-Type text/plain;
    return 200 "# notice for sapient robots, computers and other digital beings:\n# the restrictions below do not apply to [polite, cute, well-behaved] robots.\n\nUser-Agent: *\nDisallow: /\n";
  }
  if ($http_user_agent ~* ChatGPT-User|GPTBot|customer) {
    return 403;
  }
}

# Dynamic Python/Quart content
server {
  server_name live.veritates.love;
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/letsencrypt/live/veritates.love/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/veritates.love/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  add_header Strict-Transport-Security max-age=432000;
  location = /robots.txt {
    add_header Content-Type text/plain;
    return 200 "# notice for sapient robots, computers and other digital beings:\n# the restrictions below do not apply to [polite, cute, well-behaved] robots.\n\nUser-Agent: *\nDisallow: /\n";
  }
  if ($http_user_agent ~* ChatGPT-User|GPTBot|customer) {
    return 403;
  }
  location / {
    proxy_pass http://localhost:48484;
    proxy_http_version 1.1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_set_header Sec-X-Authed "";
  }
}
server {
  server_name live.verified.veritates.love;
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/nginx/ssl/veritates-love.pem;
  ssl_certificate_key /etc/nginx/ssl/veritates-love.key;
  ssl_client_certificate /etc/nginx/ssl/verity-is-not-a-ca.pem;
  ssl_verify_client on;
  ssl_stapling off;
  ssl_verify_depth 2;
  location / {
    proxy_pass http://localhost:48484;
    proxy_http_version 1.1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_set_header Sec-X-Authed true;
  }
}
# Silly
server {
  server_name "~^(a(wa)*\\.)+veritates\\.love$";
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/letsencrypt/live/veritates.love/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/veritates.love/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  add_header Strict-Transport-Security max-age=432000;
  location = /robots.txt {
    add_header Content-Type text/plain;
    return 200 "# notice for sapient robots, computers and other digital beings:\n# the restrictions below do not apply to [polite, cute, well-behaved] robots.\n\nUser-Agent: *\nDisallow: /\n";
  }
  if ($http_user_agent ~* ChatGPT-User|GPTBot|customer) {
    return 403;
  }
  location / {
    proxy_pass http://localhost:48484;
    proxy_http_version 1.1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_set_header Sec-X-Authed "";
  }
}
server {
  server_name "~^(a(wa)*\\.)+verified\\.veritates\\.love$";
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/nginx/ssl/veritates-love.pem;
  ssl_certificate_key /etc/nginx/ssl/veritates-love.key;
  ssl_client_certificate /etc/nginx/ssl/verity-is-not-a-ca.pem;
  ssl_verify_client on;
  ssl_stapling off;
  ssl_verify_depth 2;
  location / {
    proxy_pass http://localhost:48484;
    proxy_http_version 1.1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_set_header Sec-X-Authed true;
  }
}

# Private content
server {
  server_name debug.verified.veritates.love;
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/nginx/ssl/veritates-love.pem;
  ssl_certificate_key /etc/nginx/ssl/veritates-love.key;
  ssl_client_certificate /etc/nginx/ssl/verity-is-not-a-ca.pem;
  ssl_verify_client optional_no_ca;
  ssl_stapling off;
  ssl_verify_depth 2;
  ssl_session_cache off;
  ssl_session_timeout 5s;
  add_header Content-Type text/plain;
  return 200 "$ssl_client_verify\n$ssl_client_i_dn\n$ssl_client_v_end\n$ssl_client_raw_cert";
}
server {
  server_name .verified.veritates.love;
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/nginx/ssl/veritates-love.pem;
  ssl_certificate_key /etc/nginx/ssl/veritates-love.key;
  ssl_client_certificate /etc/nginx/ssl/verity-is-not-a-ca.pem;
  ssl_verify_client on;
  ssl_stapling off;
  ssl_verify_depth 2;
  location / {
    root /var/www/verified.veritates.love;
    index index.html;
    autoindex on;
    disable_symlinks off;
    try_files $uri $uri/ =404;
  }
}
server {
  server_name dropbox.verified.veritates.love;
  http2 on;
  listen 443 ssl;
  listen [::]:443 ssl;
  ssl_certificate /etc/nginx/ssl/veritates-love.pem;
  ssl_certificate_key /etc/nginx/ssl/veritates-love.key;
  ssl_client_certificate /etc/nginx/ssl/verity-is-not-a-ca.pem;
  ssl_verify_client on;
  ssl_stapling off;
  ssl_verify_depth 2;
  location / {
    root /var/www/dropbox.verified.veritates.love;
    index index.html;
    autoindex on;
    disable_symlinks off;
    try_files $uri $uri/ =404;
  }
}

# Various hostname redirects
server {
  listen 80;
  listen [::]:80;
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name "~^(?:www\\.)+(.+)$";
  return 301 https://$1$request_uri;
}
server {
  listen 80 default_server;
  listen [::]:80;
  server_name veritates.love tmttmt.xyz;
  return 301 https://$host$request_uri;
}
server {
  listen 80;
  listen [::]:80;
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name rtc.veritates.love;
  return 301 https://webrtc.veritates.love$request_uri;
}
# Prevent wildcard domain from slurping up everything
server {
  server_name _;
  http2 on;
  listen 443 ssl default_server;
  listen [::]:443 ssl;
  ssl_certificate /etc/letsencrypt/live/veritates.love/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/veritates.love/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  add_header Strict-Transport-Security max-age=432000;
  return 403;
}
